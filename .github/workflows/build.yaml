# build and test. also deploy if commit is tagged with version-like tag.

name: build

# only build on schedule, during releases, or upon manual request
on:
  schedule:
  # daily 0423 UTC job, 0023 EST during DST and 2323 EST otherwise
  - cron: "23 4 * * *"
  push:
    tags:
    - v*
  workflow_dispatch:

env:
  # bot token required by github-action-slack-notify-build
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_ACTIONS_COURIER_TOKEN }}
  # delimiter separating job statuses from step statuses
  STEP_DELIM: ==============================
  # deployment status sent by notify_build_ok. running if deploy, else skipped
  DEPLOY_STATUS: skipped

jobs:
  # simply create tar.gz in dist which is uploaded to dist_artifact
  build_sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # setup.py uses NumPy's get_include function and setuptools
    - name: Install sdist requirements
      id: before-install
      run: pip3 install -r install_requires.txt
    - name: Create tar.gz sdist
      id: create-sdist
      run: python3 setup.py sdist
    - name: Upload sdist artifact
      id: upload-sdist
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist/*.tar.gz
        if-no-files-found: error
    - name: Notify Slack on job failure if job did not succeed
      if: failure()
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: |
          [job] ${{ github.job }}: ${{ job.status }}
          ${{ env.STEP_DELIM }}
          [step] before-install: ${{ steps.before-install.outcome }}
          [step] create-sdist: ${{ steps.create-sdist.outcome }}
          [step] upload-sdist: ${{ steps.upload-sdist.outcome }}
        color: danger

  # build wheels for manylinux1, manylinux2010, MacOS, Windows
  build_wheels:
    runs-on: ${{ matrix.os }}

    strategy:
      # define virtual machines to build on + manylinux types to build for
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        manylinux: [manylinux1, manylinux2010]
        # prevent Windows, MacOS wheels from being built twice
        exclude:
        - os: windows-latest
          manylinux: manylinux2010
        - os: macos-latest
          manylinux: manylinux2010

    steps:
    - uses: actions/checkout@v2
    - name: Build and test wheels
      id: cibuildwheel
      uses: pypa/cibuildwheel@v2.0.1
      with:
        # to use the PyPA publish action, we want everything in dist
        output-dir: dist
      env:
        # python versions to build (skip PyPy). skip other manylinux archs
        CIBW_BUILD: cp36-* cp37-* cp38-* cp39-*
        CIBW_SKIP: "*-manylinux_aarch64 *-manylinux_ppc64le *-manylinux_s390x"
        # always use pip to build. install pre-install reqs for setup.py
        CIBW_BUILD_FRONTEND: pip
        CIBW_BEFORE_BUILD: pip install -r install_requires.txt
        # build both manylinux1 and manylinux2010 for x86-64 and i686
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux }}
        # extras_requires to install (installs pytest) + testing command
        CIBW_TEST_EXTRAS: tests
        CIBW_TEST_COMMAND: >
          pytest -rsxXP -v --pyargs npapibench.tests &&
          pytest -rsxXP -v --pyargs npapibench.functimer.tests
        # increase pip verbosity during build so we can see compiler output
        CIBW_BUILD_VERBOSITY: 1
    - name: Upload wheel artifacts
      id: upload-wheels
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist/*.whl
        if-no-files-found: error
    - name: Notify Slack on job failure and where the failure occurred
      if: failure()
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: |
          [job] ${{ github.job }}: ${{ job.status }}
          ${{ env.STEP_DELIM }}
          [step] cibuildwheel: ${{ steps.cibuildwheel.outcome }}
          [step] upload-wheels: ${{ steps.upload-wheels.outcome }}
        color: danger

  # notifies build success if all build jobs succeeded
  notify_build_ok:
    runs-on: ubuntu-latest
    needs: [build_sdist, build_wheels]
    steps:
    - name: Set env.DEPLOY_STATUS to yes on tag push
      # runs only if version tag is present
      if: ${{ contains(github.ref, 'refs/tags/v') }}
      run: echo "DEPLOY_STATUS=running" >> $GITHUB_ENV
    - name: Notify Slack on workflow build success
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: |
          [job] build_sdist: success
          [job] build_wheels: success
          [job] deploy: ${{ env.DEPLOY_STATUS }}
        color: good

  # deploy job, depends on build_wheels and build_sdist, run when tags pushed
  deploy:
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist, notify_build_ok]
    if: ${{ contains(github.ref, 'refs/tags/v') }}
    steps:
    - uses: actions/checkout@v2
    - name: Download .tar.gz and wheel artifacts
      id: download-dist
      uses: actions/download-artifact@v2
      with:
        name: dist_artifact
        path: dist
    - name: Create new env variables SRC_ARTIFACT_PATH, SRC_ARTIFACT_NAME
      # appends definitions to the GITHUB_ENV environment file.
      # SRC_ARTIFACT_PATH is the path to the .tar.gz source, RELEASE_VERSION
      # gives the version specified by the git tag, SRC_ARTIFACT_NAME is the
      # name of the .tar.gz that we upload to the release
      run: |
        echo "SRC_ARTIFACT_PATH=$(find dist/*.tar.gz)" >> $GITHUB_ENV
        echo "RELEASE_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
        echo "SRC_ARTIFACT_NAME=$RELEASE_VERSION.tar.gz" >> $GITHUB_ENV
    - name: Create production release
      # need id so we can reference the upload URL later to upload SRC_ARTIFACT
      id: create-release
      uses: actions/create-release@v1
      with:
        # don't use RELEASE_VERSION since instances of refs/tags/ are 
        # automatically stripped from tag_name and release_name
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: >
          ${{ format('Release {0} deployed by GitHub Actions build. This text
          is auto-generated by create-release action.', env.RELEASE_VERSION) }}
    - name: Upload .tar.gz to release URL
      id: upload-release
      uses: actions/upload-release-asset@v1
      with:
        # use upload URL from the release creation step's outputs
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        # path to the asset, given by SRC_ARTIFACT_PATH
        asset_path: ${{ env.SRC_ARTIFACT_PATH }}
        # upload name for the asset, given by SRC_ARTIFACT_NAME
        asset_name: ${{ env.SRC_ARTIFACT_NAME }}
        # appropriate content type
        asset_content_type: application/gzip
    - name: Deploy manylinux1 wheels and .tar.gz source to PyPI
      id: deploy-release
      uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        user: __token__
        password: ${{ secrets.LOCAL_PYPI_TOKEN }}
    - name: Set Slack notification color to good if deploy successful
      if: success()
      run: echo "NOTIF_COLOR=good" >> $GITHUB_ENV
    - name: Set Slack notification color to danger if deploy unsuccessful
      if: failure()
      run: echo "NOTIF_COLOR=danger" >> $GITHUB_ENV
    - name: Notify Slack on workflow deploy status
      # always run
      if: always()
      uses: voxmedia/github-action-slack-notify-build@v2
      with:
        channel: gh-actions-alerts
        status: |
          [job] ${{ github.job }}: ${{ job.status }}
          ${{ env.STEP_DELIM }}
          [step] download-dist: ${{ steps.download-dist.outcome }}
          [step] create-release: ${{ steps.create-release.outcome }}
          [step] upload-release: ${{ steps.upload-release.outcome }}
          [step] deploy-release: ${{ steps.deploy-release.outcome }}
        color: good