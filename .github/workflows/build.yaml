# build and test. also deploy if commit is tagged with version-like tag.

name: build

on: push

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # build wheels for linux (manylinux2010 and up), mac, windows
  build_wheels:
    runs-on: ${{ matrix.os }}

    strategy:
      # define virtual machines to build on + manylinux types to build for
      matrix:
        os: [ubuntu-18.04, windows-latest, macos-latest]
        manylinux: [manylinux1, manylinux2010]
        # prevent windows, mac wheels from being built twice
        exclude:
        - os: windows-latest
          manylinux: manylinux2010
        - os: macos-latest
          manylinux: manylinux2010

    steps:
    - uses: actions/checkout@v2
    # cibuildwheel hopefully will simplify a series of bash scripts previously
    # used for building manylinux1 wheels on the required PyPA Docker images.
    - name: Build and test wheels
      uses: pypa/cibuildwheel@v2.0.1
      with:
        # to use the PyPA publish action, we want everything in dist
        output-dir: dist
      env:
        # python versions to build (skip PyPy). skip other manylinux archs
        CIBW_BUILD: cp36-* cp37-* cp38-* cp39-*
        CIBW_SKIP: "*-manylinux_aarch64 *-manylinux_ppc64le *-manylinux_s390x"
        # always use pip to build. install required pre-install requirements
        CIBW_BUILD_FRONTEND: pip
        CIBW_BEFORE_BUILD: pip install -r tools/requirements.txt
        # build both manylinux1 and manylinux2010 for x86-64 and i686
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux }}
        CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux }}
        # extras_requires extras to install (also pytest) + testing command
        CIBW_TEST_EXTRAS: tests
        CIBW_TEST_COMMAND: >
          pytest -rsxXP -v --pyargs npapibench.tests &&
          pytest -rsxXP -v --pyargs npapibench.functimer.tests
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist/*.whl
        # if no files, error
        if-no-files-found: error

  # simply create tar.gz in dist which is uploaded to dist_artifact
  build_sdist:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    # setup.py uses numpy.get_include, so we have to also install NumPy
    - name: Install sdist requirements
      run: pip install -r tools/requirements.txt
    - name: Create tar.gz sdist
      run: python3 setup.py sdist
    - name: Upload sdist artifact
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist
        if-no-files-found: error

  # deploy job, depends on build_wheels and build_sdist
  deploy:
    runs-on: ubuntu-18.04
    needs: [build_wheels, build_sdist]
    # run only if version tag is present
    if: ${{ contains(github.ref, 'refs/tags/v') }}
    steps:
    - uses: actions/checkout@v2
    - name: Download .tar.gz and wheel artifacts
      uses: actions/download-artifact@v2
      with:
        name: dist_artifact
        path: dist
    - name: Create new env variables SRC_ARTIFACT_PATH, SRC_ARTIFACT_NAME
      # appends definitions to the GITHUB_ENV environment file.
      # SRC_ARTIFACT_PATH is the path to the .tar.gz source, RELEASE_VERSION
      # gives the version specified by the git tag, SRC_ARTIFACT_NAME is the
      # name of the .tar.gz that we upload to the release
      run: |
        echo "SRC_ARTIFACT_PATH=$(find dist/*.tar.gz)" >> $GITHUB_ENV
        echo "RELEASE_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
        echo "SRC_ARTIFACT_NAME=$RELEASE_VERSION.tar.gz" >> $GITHUB_ENV
    - name: Create production release
      # need id so we can reference the upload URL later to upload SRC_ARTIFACT
      id: create_release
      uses: actions/create-release@v1
      # tag and release name are identical
      with:
        # don't use RELEASE_VERSION since instances of refs/tags/ are 
        # automatically stripped from tag_name and release_name
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: >
          ${{ format('Release {0} deployed by GitHub Actions build. This text
          is auto-generated by create-release action.', env.RELEASE_VERSION) }}
    - name: Upload .tar.gz to release URL
      uses: actions/upload-release-asset@v1
      with:
        # use upload URL from the release creation step's outputs
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # path to the asset, given by SRC_ARTIFACT_PATH
        asset_path: ${{ env.SRC_ARTIFACT_PATH }}
        # upload name for the asset, given by SRC_ARTIFACT_NAME
        asset_name: ${{ env.SRC_ARTIFACT_NAME }}
        # appropriate content type
        asset_content_type: application/gzip
    - name: Deploy manylinux1 wheels and .tar.gz source to PyPI
      uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        user: __token__
        password: ${{ secrets.LOCAL_PYPI_TOKEN }}