# build and test. need to be able to build on manylinux1 image + pass tests.
# run after passing local unit tests using pytest wrapped with libcheck and
# after valgrind has produced satisfactory results.
#
# can also deploy if commit is tagged with version-like tag.
#
name: build

on: push

env:
  # where to mount the top-level directory of the repo in docker
  DOCKER_MNT: /_build
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        # docker images for manylinux building (i686 and x86_64)
        docker_image:
        - quay.io/pypa/manylinux1_x86_64
        - quay.io/pypa/manylinux1_i686
      # run sequentially so upload of tar.gz source isn't corrupted
      max-parallel: 1
    steps:
    - uses: actions/checkout@v2
    - name: Pull manylinux docker image
      run: docker pull ${{ matrix.docker_image }}
    - name: Build manylinux wheels on docker image
      # platform the wheels are built for is taken from matrix.docker_image.
      # current dir is mounted in docker as $DOCKER_MNT. run script in bash
      # shell so there's no need to make the file executable in docker image.
      # builds wheels for python versions 3.6-3.8 inclusive.
      run: > 
        docker container run -e DOCKER_MNT=$DOCKER_MNT -e
        DOCKER_IMAGE=${{ matrix.docker_image }} -v `pwd`:$DOCKER_MNT
        ${{ matrix.docker_image }} bash $DOCKER_MNT/tools/build_manylinux.sh
    - name: Install and test manylinux wheels on docker image with pytest
      # use --rm option to clean up afterwards. install and test wheels
      run: >
        docker container run -e DOCKER_MNT=$DOCKER_MNT -e
        DOCKER_IMAGE=${{ matrix.docker_image }} -v `pwd`:$DOCKER_MNT
        ${{ matrix.docker_image }} bash $DOCKER_MNT/tools/test_manylinux.sh
    - name: Upload .tar.gz and manylinux wheel artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist_artifact
        path: dist
        # if no files, error
        if-no-files-found: error
        # can delete artifacts in the workflow summary page
  deploy:
    runs-on: ubuntu-18.04
    # can only deploy after building
    needs: build
    # run only if version tag is present
    if: ${{ contains(github.ref, 'refs/tags/v') }}
    steps:
    - uses: actions/checkout@v2
    - name: Download .tar.gz and manylinux wheel artifacts
      uses: actions/download-artifact@v2
      with:
        name: dist_artifact
        path: dist
    - name: >
        Create new env variables SRC_ARTIFACT_PATH, SRC_ARTIFACT_NAME
      # appends definition to the GITHUB_ENV environment file.
      # SRC_ARTIFACT_PATH is the path to the .tar.gz source, RELEASE_VERSION
      # gives the version specified by the git tag, SRC_ARTIFACT_NAME is the
      # name of the .tar.gz that we upload to the release
      run: |
        echo "SRC_ARTIFACT_PATH=$(find dist/*.tar.gz)" >> $GITHUB_ENV
        echo "RELEASE_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
        echo "SRC_ARTIFACT_NAME=$RELEASE_VERSION.tar.gz" >> $GITHUB_ENV
    - name: Create production release
      # need id so we can reference the upload URL later to upload SRC_ARTIFACT
      id: create_release
      uses: actions/create-release@v1
      # tag and release name are identical
      with:
        # don't use RELEASE_VERSION since instances of refs/tags/ are 
        # automatically stripped from tag_name and release_name
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: >
          ${{ format('{0} deployed by GitHub Actions build',
          env.RELEASE_VERSION) }}
    - name: Upload .tar.gz to release URL
      uses: actions/upload-release-asset@v1
      with:
        # use upload URL from the release creation step's outputs
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # path to the asset, given by SRC_ARTIFACT_PATH
        asset_path: ${{ env.SRC_ARTIFACT_PATH }}
        # upload name for the asset, given by SRC_ARTIFACT_NAME
        asset_name: ${{ env.SRC_ARTIFACT_NAME }}
        # appropriate content type
        asset_content_type: application/gzip
    - name: Deploy manylinux1 wheels and .tar.gz source to PyPI
      uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        user: __token__
        password: ${{ secrets.LOCAL_PYPI_TOKEN }}